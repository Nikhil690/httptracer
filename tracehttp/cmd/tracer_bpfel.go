// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package cmd

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadTracer returns the embedded CollectionSpec for Tracer.
func LoadTracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Tracer: %w", err)
	}

	return spec, err
}

// LoadTracerObjects loads Tracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*TracerObjects
//	*TracerPrograms
//	*TracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TracerSpecs struct {
	TracerProgramSpecs
	TracerMapSpecs
	TracerVariableSpecs
}

// TracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TracerProgramSpecs struct {
	HandleRead     *ebpf.ProgramSpec `ebpf:"handle_read"`
	HandleWrite    *ebpf.ProgramSpec `ebpf:"handle_write"`
	RawExecve      *ebpf.ProgramSpec `ebpf:"raw_execve"`
	TraceExitRead  *ebpf.ProgramSpec `ebpf:"trace_exit_read"`
	TraceExitWrite *ebpf.ProgramSpec `ebpf:"trace_exit_write"`
}

// TracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TracerMapSpecs struct {
	BufMap *ebpf.MapSpec `ebpf:"buf_map"`
	Events *ebpf.MapSpec `ebpf:"events"`
}

// TracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TracerVariableSpecs struct {
}

// TracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type TracerObjects struct {
	TracerPrograms
	TracerMaps
	TracerVariables
}

func (o *TracerObjects) Close() error {
	return _TracerClose(
		&o.TracerPrograms,
		&o.TracerMaps,
	)
}

// TracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type TracerMaps struct {
	BufMap *ebpf.Map `ebpf:"buf_map"`
	Events *ebpf.Map `ebpf:"events"`
}

func (m *TracerMaps) Close() error {
	return _TracerClose(
		m.BufMap,
		m.Events,
	)
}

// TracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type TracerVariables struct {
}

// TracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type TracerPrograms struct {
	HandleRead     *ebpf.Program `ebpf:"handle_read"`
	HandleWrite    *ebpf.Program `ebpf:"handle_write"`
	RawExecve      *ebpf.Program `ebpf:"raw_execve"`
	TraceExitRead  *ebpf.Program `ebpf:"trace_exit_read"`
	TraceExitWrite *ebpf.Program `ebpf:"trace_exit_write"`
}

func (p *TracerPrograms) Close() error {
	return _TracerClose(
		p.HandleRead,
		p.HandleWrite,
		p.RawExecve,
		p.TraceExitRead,
		p.TraceExitWrite,
	)
}

func _TracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tracer_bpfel.o
var _TracerBytes []byte
